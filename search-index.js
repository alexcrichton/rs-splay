var N = null;var searchIndex = {};
searchIndex["splay"]={"doc":"Contains an implementation of splay trees where each node…","items":[[0,"set","splay","",N,N],[3,"SplaySet","splay::set","",N,N],[3,"IntoIter","","",N,N],[11,"new","","Creates a new empty set",0,[[],["splayset"]]],[11,"into_iter","","Moves all values out of this set, transferring ownership…",0,[[["self"]],["intoiter"]]],[11,"len","","",0,[[["self"]],["usize"]]],[11,"is_empty","","",0,[[["self"]],["bool"]]],[11,"clear","","",0,[[["self"]]]],[11,"contains","","Return true if the set contains a value",0,[[["self"],["t"]],["bool"]]],[11,"insert","","Add a value to the set. Return true if the value was not…",0,[[["self"],["t"]],["bool"]]],[11,"remove","","Remove a value from the set. Return true if the value was…",0,[[["self"],["t"]],["bool"]]],[0,"map","splay","",N,N],[3,"SplayMap","splay::map","The implementation of this splay tree is largely based on…",N,N],[3,"IntoIter","","",N,N],[11,"new","","",1,[[],["splaymap"]]],[11,"into_iter","","Moves all values out of this map, transferring ownership…",1,[[["self"]],["intoiter"]]],[11,"len","","",1,[[["self"]],["usize"]]],[11,"is_empty","","",1,[[["self"]],["bool"]]],[11,"clear","","Clears the tree in O(1) extra space (including the stack).…",1,[[["self"]]]],[11,"contains_key","","Return true if the map contains a value for the specified…",1,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value corresponding to the key",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","Return a mutable reference to the value corresponding to…",1,[[["self"],["q"]],["option"]]],[11,"insert","","Insert a key-value pair from the map. If the key already…",1,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",1,[[["self"],["q"]],["option"]]],[11,"from","splay::set","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","splay::map","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"default","splay::set","",0,[[],["splayset"]]],[11,"default","splay::map","",1,[[],["splaymap"]]],[11,"next_back","splay::set","",2,[[["self"]],["option"]]],[11,"next_back","splay::map","",3,[[["self"]],["option"]]],[11,"clone","splay::set","",0,[[["self"]],["splayset"]]],[11,"clone","splay::map","",1,[[["self"]],["splaymap"]]],[11,"extend","splay::set","",0,[[["self"],["i"]]]],[11,"extend","splay::map","",1,[[["self"],["i"]]]],[11,"drop","","",1,[[["self"]]]],[11,"next","splay::set","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","splay::map","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"index","","",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","",1,[[["self"],["q"]],["v"]]],[11,"from_iter","splay::set","",0,[[["i"]],["splayset"]]],[11,"from_iter","splay::map","",1,[[["i"]],["splaymap"]]]],"paths":[[3,"SplaySet"],[3,"SplayMap"],[3,"IntoIter"],[3,"IntoIter"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
